
// BSLLS:LatinAndCyrillicSymbolInWord-off

#Использовать v8find
#Использовать 1commands 

#Область ОписаниеПеременных

Перем Лог; // Экземпляр логгера
Перем ПутьКIbsrv; // Путь к утилите ibsrv
Перем ПараметрыЗапускаАС;   

Перем Процесс; // Процесс запущенного автономного сервера

Перем Версия;
Перем КаталогДанных;

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Текущая версия утилиты ibsrv
//
//  Возвращаемое значение:
//   Строка - версия утилиты
//
Функция Версия() Экспорт
	
	Если Версия = "8.3" Тогда
		ibsrv_Версия(Версия, Неопределено);
	КонецЕсли;
	
	Возврат Версия;

КонецФункции

// Устанавливает версию платформы которая будет использована для запуска утилиты ibsrv
//
// Параметры:
//   НомерВерсии - Строка - номер версии в формате 8.3.13.1341 (допустимо указание 8.3, 8.3.13)
//   Разрядность - Строка, Неопределено - разрядность требуемой версии (перечисление из РазрядностьПлатформы)
//
Процедура УстановитьВерсиюПлатформы(Знач НомерВерсии, Знач Разрядность = Неопределено) Экспорт
	
	Ожидаем.Что(НомерВерсии).ИмеетТип("Строка");
	Ожидаем.Что(Разрядность).ИмеетТип("Строка");

	ibsrv_Версия(НомерВерсии, Разрядность);

КонецПроцедуры

// Устанавливает путь к каталогу данных автономного сервера.
//
// Параметры:
//   КаталогДанныхСервера - Строка - Путь к каталогу данных сервера.
//
Процедура УстановитьКаталогДанных(Знач КаталогДанныхСервера) Экспорт

	Ожидаем.Что(КаталогДанныхСервера).ИмеетТип("Строка");
	Ожидаем.Что(ФС.КаталогСуществует(КаталогДанныхСервера)).ЭтоИстина();

	КаталогДанных = КаталогДанныхСервера;
	ПараметрыЗапускаАС.Вставить("data", ОбернутьВКавычки(КаталогДанных));

КонецПроцедуры

// Устанавливает параметры доступа к файловой базе данных.
//
// Параметры:
//   КаталогИБ - Строка - Путь к каталогу файловой базы данных «1С:Предприятия».
//
Процедура УстановитьПараметрыФайловойИБ(Знач КаталогИБ) Экспорт

	Ожидаем.Что(КаталогИБ).ИмеетТип("Строка");
	Ожидаем.Что(ФС.КаталогСуществует(КаталогИБ)).ЭтоИстина();

	ПараметрыЗапускаАС.Вставить("db-path", ОбернутьВКавычки(КаталогИБ));
   
КонецПроцедуры

// Устанавливает путь к конфигурационному файлу автономного сервера.
//
// Параметры:
//   ПутьККонфигурационномуФайлу - Строка - Путь к конфигурационному файлу.
//
Процедура УстановитьКонфигурационныйФайл(Знач ПутьККонфигурационномуФайлу) Экспорт
	
	Ожидаем.Что(ПутьККонфигурационномуФайлу).ИмеетТип("Строка");
	Ожидаем.Что(ФС.ФайлСуществует(ПутьККонфигурационномуФайлу)).ЭтоИстина();

	ПараметрыЗапускаАС.Вставить("config", ОбернутьВКавычки(ПутьККонфигурационномуФайлу));

КонецПроцедуры

// Выполняет запуск автономного сервера. При ошибке запуска вызывается исключение, которео можно проверить
// методом см. ЭтоИсключенияЗапускаАС
//
Процедура Запустить() Экспорт

	Если Запущен() Тогда
		ВызватьИсключение "Процесс ibsrv уже запущен!";
	КонецЕсли;

	Ожидаем.Что(КаталогДанных).Заполнено();

	ПараметрыКоманды = ЗаполнитьПараметрыКоманды();

	Команда = КомандаIbsrv(ПараметрыКоманды);
	Процесс = Команда.ЗапуститьПроцесс();

	ОжидатьФайлБлокировкиАС();

КонецПроцедуры

// Проверяет что исключение было вызвано программно при запуске автономного сервера.
//
// Параметры:
//   ИнформацияОбОшибке - ИнформацияОбОшибке - Описание ошибки проверяемого исключения
//
//  Возвращаемое значение:
//   Булево - Если это исключение запуска автономного сервера
//
Функция ЭтоИсключенияЗапускаАС(ИнформацияОбОшибке) Экспорт

	Возврат СтрНайти(КраткоеПредставлениеОшибки(ИнформацияОбОшибке), ТекстИсключенияЗапускаАС()) > 0;

КонецФункции

// Проверяет запущен ли процесс автономного сервера
//
//  Возвращаемое значение:
//   Булево - Истина - если процесс запущен, Ложь - в остальных случаях
//
Функция Запущен() Экспорт

	Если Процесс = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Не Процесс.Завершен;
	КонецЕсли;

КонецФункции

// Останавливает запущенный автономный сервер.
//
Процедура Остановить() Экспорт

	Если Запущен() Тогда
		Процесс.Завершить();
		Лог.Информация("Процесс ibsrv завершен.");
	КонецЕсли;
		
	Процесс = Неопределено;

КонецПроцедуры

#Область ОбработчикиСобытий

Процедура ПриСозданииОбъекта()

	Версия = "8.3";
	Лог = Логирование.ПолучитьЛог(ИмяЛога());
	ПараметрыЗапускаАС = Новый Соответствие;
	КаталогДанных = "";
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИмяЛога()
	Возврат "oscript.lib.ibcmdrunner";
КонецФункции

Функция ОбернутьВКавычки(Строка)
	Возврат СтрШаблон("""%1""", Строка);
КонецФункции

Процедура ibsrv_Версия(НомерВерсии, Разрядность)

	ПутьКIbsrv = Платформа1С.ПутьКIBSRV(НомерВерсии, Разрядность);
	Ожидаем.Что(ПутьКIbsrv).Заполнено("Не найдена установленная версия платформы: " + НомерВерсии);
	
	ПараметрыКоманды = Новый Массив;
	ПараметрыКоманды.Добавить("--version");
	
	КомандаIbsrv = КомандаIbsrv(ПараметрыКоманды);
	ВыполнитьКоманду(КомандаIbsrv);
	ВыводКоманды = КомандаIbsrv.ПолучитьВывод();
		
	Версия = СокрЛП(ВыводКоманды);	

КонецПроцедуры

Функция КомандаIbsrv(ПараметрыКоманды)

	Команда = Новый Команда();
	Команда.УстановитьКоманду(ПутьКIbsrv);
	Команда.ДобавитьПараметры(ПараметрыКоманды);
	Команда.УстановитьИсполнениеЧерезКомандыСистемы(Ложь);
	//Команда.УстановитьКодировкуВывода(КодировкаТекста.UTF8);

	Возврат Команда;

КонецФункции

Процедура ВыполнитьКоманду(КомандаIbsrv, УстановленныйКодВозврата = 0)

	Если ТипЗнч(УстановленныйКодВозврата) = Тип("Массив") Тогда
		УспешныеКодыВозврата = УстановленныйКодВозврата;
	Иначе
		УспешныеКодыВозврата = Новый Массив;
		УспешныеКодыВозврата.Добавить(УстановленныйКодВозврата);
	КонецЕсли;

	КодВозврата = КомандаIbsrv.Исполнить();

	Если УспешныеКодыВозврата.Найти(КодВозврата) = Неопределено Тогда
		ВызватьИсключение КомандаIbsrv.ПолучитьВывод();
	КонецЕсли;

КонецПроцедуры

Процедура ОжидатьФайлБлокировкиАС()

	ИнтервалПроверкиМс = 500; // 0.5 сек
	ПредельныйПериодОжиданияМс = 10000; // 10 сек
	ТекущийПериодОжидания = 0;
	ФайлСуществует = Ложь;
	ИмяФайла = ОбъединитьПути(КаталогДанных, "lock.pid");

	Пока Запущен() И ТекущийПериодОжидания < ПредельныйПериодОжиданияМс Цикл 
		Приостановить(ИнтервалПроверкиМс);

		Если ФС.ФайлСуществует(ИмяФайла) Тогда
			ФайлСуществует = Истина;
			Прервать;
		КонецЕсли;		

		ТекущийПериодОжидания = ТекущийПериодОжидания + ИнтервалПроверкиМс;

	КонецЦикла;

	Если ФайлСуществует Тогда
		Возврат;
	КонецЕсли;
	
	Если Запущен() Тогда
		Остановить();
	КонецЕсли;

	ВызватьИсключение ТекстИсключенияЗапускаАС();
	 	
КонецПроцедуры

Функция ТекстИсключенияЗапускаАС()

	Возврат "Процесс ibsrv не запустился!";

КонецФункции

Функция ЗаполнитьПараметрыКоманды()
	
	ПараметрыКоманды = Новый Массив;

	Для Каждого КлючИЗначение Из ПараметрыЗапускаАС Цикл
		Если КлючИЗначение.Значение = Неопределено Тогда // это параметр-флаг
			ПараметрыКоманды.Добавить(КлючИЗначение.Ключ);	
			Продолжить;

		ИначеЕсли ТипЗнч(КлючИЗначение.Значение) = Тип("Строка") И ПустаяСтрока(КлючИЗначение.Значение) Тогда
			Продолжить;	
		
		ИначеЕсли ТипЗнч(КлючИЗначение.Значение) = Тип("Булево") Тогда
			Значение = ?(КлючИЗначение.Значение, "allow", "deny");

		ИначеЕсли ТипЗнч(КлючИЗначение.Значение) = Тип("Число") Тогда
			Значение = XMLСтрока(КлючИЗначение.Значение);
		
		Иначе
			Значение = КлючИЗначение.Значение;

		КонецЕсли;
		
		ПараметрЗапуска = СтрШаблон("--%1=%2", КлючИЗначение.Ключ, Значение);
		ПараметрыКоманды.Добавить(ПараметрЗапуска);	
	
	КонецЦикла;

	Возврат ПараметрыКоманды;

КонецФункции

#КонецОбласти
